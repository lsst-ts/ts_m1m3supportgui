#!/usr/bin/env python3
# -'''- coding: utf-8 -'''-

import signal
import sys
import time

from ApplicationControlWidget import ApplicationControlWidget
from ApplicationStatusWidget import ApplicationStatusWidget
from ApplicationPaginationWidget import ApplicationPaginationWidget

from ActuatorOverviewPageWidget import ActuatorOverviewPageWidget
from AirPageWidget import AirPageWidget
from CellLightPageWidget import CellLightPageWidget
from DCAccelerometerPageWidget import DCAccelerometerPageWidget
from ForceActuatorGraphPageWidget import ForceActuatorGraphPageWidget
from ForceActuatorValuePageWidget import ForceActuatorValuePageWidget
from ForceBalanceSystemPageWidget import ForceBalanceSystemPageWidget
from ForceActuatorBumpTestPageWidget import ForceActuatorBumpTestPageWidget
from GyroPageWidget import GyroPageWidget
from HardpointsWidget import HardpointsWidget
from IMSPageWidget import IMSPageWidget
from InclinometerPageWidget import InclinometerPageWidget
from InterlockPageWidget import InterlockPageWidget
from OffsetsWidget import OffsetsWidget
from OverviewPageWidget import OverviewPageWidget
from PIDPageWidget import PIDPageWidget
from PowerPageWidget import PowerPageWidget
from SALLogWidget import SALLogWidget
from SALErrorCodeWidget import SALErrorCodeWidget

import SALComm

from PySide2.QtCore import QSettings
from PySide2.QtWidgets import (
    QApplication,
    QWidget,
    QVBoxLayout,
    QMainWindow,
    QHBoxLayout,
    QLabel,
)
from PySide2.QtGui import QFont

from asyncqt import QEventLoop, asyncClose
import asyncio


class EUI(QMainWindow):
    def __init__(self, loop, parent=None):
        super().__init__(parent)
        topLayerLayout = QHBoxLayout()

        self.m1m3 = SALComm.create("MTM1M3")
        self.mtmount = SALComm.create("MTMount", include=["azimuth", "elevation"])

        self.applicationControlLayout = QVBoxLayout()
        self.applicationControl = ApplicationControlWidget(self.m1m3)
        self.applicationControl.setFixedSize(256, 175)
        self.applicationControlLayout.addWidget(QLabel("Application Control"))
        self.applicationControlLayout.addWidget(self.applicationControl)
        topLayerLayout.addLayout(self.applicationControlLayout)

        self.applicationStatusLayout = QVBoxLayout()
        self.applicationStatus = ApplicationStatusWidget(self.m1m3)
        self.applicationStatus.setFixedHeight(175)
        self.applicationStatusLayout.addWidget(QLabel("Application Status"))
        self.applicationStatusLayout.addWidget(self.applicationStatus)
        topLayerLayout.addLayout(self.applicationStatusLayout)

        middleLayerLayout = QHBoxLayout()
        self.applicationPagination = ApplicationPaginationWidget()
        self.applicationPagination.setPageListWidth(238)

        self.addPage("Overview", OverviewPageWidget(self.m1m3, self.mtmount))
        self.addPage("Actuator Overview", ActuatorOverviewPageWidget(self.m1m3))
        self.addPage("Hardpoints", HardpointsWidget(self.m1m3))
        self.addPage("Offsets", OffsetsWidget(self.m1m3))
        self.addPage("DC Accelerometers", DCAccelerometerPageWidget(self.m1m3))
        self.addPage("Gyro", GyroPageWidget(self.m1m3))
        self.addPage("IMS", IMSPageWidget(self.m1m3))
        self.addPage("Inclinometer", InclinometerPageWidget(self.m1m3))
        self.addPage("Interlock", InterlockPageWidget(self.m1m3))
        self.addPage("Lights", CellLightPageWidget(self.m1m3))
        self.addPage("Air", AirPageWidget(self.m1m3))
        self.addPage("Power", PowerPageWidget(self.m1m3))
        self.addPage("PID", PIDPageWidget(self.m1m3))
        self.addPage("Force Balance System", ForceBalanceSystemPageWidget(self.m1m3))
        self.addPage(
            "Force Actuator Bump Test", ForceActuatorBumpTestPageWidget(self.m1m3)
        )
        self.addPage("Force Actuator Graph", ForceActuatorGraphPageWidget(self.m1m3))
        self.addPage("Force Actuator Value", ForceActuatorValuePageWidget(self.m1m3))
        self.addPage("SAL Log", SALLogWidget(self.m1m3))
        self.addPage("SAL Errors", SALErrorCodeWidget(self.m1m3))
        middleLayerLayout.addWidget(self.applicationPagination)

        layout = QVBoxLayout()
        layout.addLayout(topLayerLayout)
        layout.addLayout(middleLayerLayout)

        m1m3Widget = QWidget()
        m1m3Widget.setLayout(layout)

        self.setCentralWidget(m1m3Widget)

        self.setMinimumSize(700, 400)

        settings = QSettings("LSST.TS", "M1M3GUI")
        try:
            self.restoreGeometry(settings.value("geometry"))
            self.restoreState(settings.value("windowState"))
        except AttributeError:
            self.resize(1000, 700)

    def addPage(self, name, widget):
        self.applicationPagination.addPage(name, widget)

    @asyncClose
    async def closeEvent(self, event):
        settings = QSettings("LSST.TS", "M1M3GUI")
        settings.setValue("geometry", self.saveGeometry())
        settings.setValue("windowState", self.saveState())
        await self.m1m3.close()
        await self.mtmount.close()
        super().closeEvent(event)


if __name__ == "__main__":
    # Create the Qt Application
    app = QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    # Create EUI
    eui = EUI(loop)
    eui.show()

    def handler(signum, frame):
        print(f"Catching signal {signum}, exiting")
        loop.call_soon(eui.close)

    for signum in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]:
        signal.signal(signum, handler)

    # Run the main Qt loop
    with loop:
        loop.run_forever()

    # Close application
    sys.exit()
