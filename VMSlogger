#!/usr/bin/env python3.8

# Save VMS data to a file.
#
# Developed for the LSST Telescope and Site Systems.
# This product includes software developed by the LSST Project
# (https://www.lsst.org). See the COPYRIGHT file at the top - level directory
# of this distribution for details of code ownership.
#
# This program is free software : you can redistribute it and / or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.If not, see <https://www.gnu.org/licenses/>.

import signal
import sys

from VMSCache import *

import argparse
import asyncio
import click
from datetime import datetime
import numpy as np
import logging

from lsst.ts.salobj import Domain, Remote

devices = ["M1M3", "M2", "Rotator"]

parser = argparse.ArgumentParser(description="Save VMS data to a file")
parser.add_argument(
    "devices", type=str, nargs="+", help="name or index of CSC", choices=devices
)
parser.add_argument(
    "-s", type=int, dest="size", default=50000, help="number of records to save"
)
parser.add_argument(
    "-d", dest="debug", default=0, action="count", help="Increase debug level"
)

device_sensors = [3, 6, 3]

logger = logging.getLogger("VMSlogger")
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()

formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
ch.setFormatter(formatter)


async def collect_data(index, filename, size):
    logger.debug(f"Creating cache: index={index+1} sensors={device_sensors[index]}")
    cache = VMSCache(size, device_sensors[index])
    async with Domain() as domain:
        remote = Remote(domain, "MTVMS", index=index + 1)
        remote.tel_data.callback = lambda data: cache.newChunk(data, 0.001)
        if logger.getEffectiveLevel() == logging.DEBUG:
            while not (cache.filled):
                await asyncio.sleep(0.5)
                logger.debug(
                    f"Waiting {devices[index]}..{100 * len(cache)/size:.02f}% {len(cache)} of {size}"
                )
        else:
            with click.progressbar(
                length=size,
                label=f"Getting data {devices[index]}",
                show_eta=True,
                show_percent=True,
                width=0,
            ) as bar:
                current = 0
                while not (cache.filled):
                    l = len(cache)
                    bar.update(l - current)
                    current = l
                    await asyncio.sleep(0.1)
                bar.update(len(cache) - current)

        logger.info(f"Saving CVS to {filename}")
        cache.savetxt(filename, delimiter=",")


async def main():
    args = parser.parse_args()
    if args.debug > 0:
        ch.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
        ch.setLevel(logging.INFO)
    logger.addHandler(ch)

    tasks = []

    def cancel_all(signum, frame):
        logger.info(f"Canceling after {signum}")
        for t in tasks:
            t.cancel()

    for signum in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]:
        signal.signal(signum, cancel_all)

    for d in args.devices:
        suffix = datetime.strftime(datetime.now(), "%Y-%d-%mT%H:%M:%S")
        logger.info(f"Collecting {d} with suffix {suffix}")
        tasks.append(
            asyncio.create_task(
                collect_data(devices.index(d), f"{d}_{suffix}.csv", args.size)
            )
        )
    try:
        await asyncio.gather(*tasks)
        logger.info("Done")
    except asyncio.exceptions.CancelledError:
        logger.info("Canceled")


asyncio.run(main())
