#!/usr/bin/env python3.8

import signal
import sys

from AccelerometersPageWidget import AccelerometersPageWidget, BoxChartWidget
import SALLog
from VMSGUI import *

import SALComm

from PySide2.QtCore import Slot, Signal, QSettings, QCommandLineParser, Qt
from PySide2.QtWidgets import QApplication, QMainWindow, QDockWidget

from asyncqt import QEventLoop, asyncClose
import asyncio
from functools import partial


class EUI(QMainWindow):
    SYSTEMS = ["M1M3", "M2", "ROTATOR"]

    def __init__(self):
        super().__init__()

        self.comms = [
            SALComm.create("MTVMS", index=index, manual={"data": {"queue_len": 400}})
            for index in range(1, 4)
        ]

        logDock = SALLog.Dock(self.comms)

        menuBar = self.menuBar()

        viewMenu = menuBar.addMenu("&Views")
        viewMenu.addAction("M&1M3 box graph", partial(self.addBox, 0))
        viewMenu.addAction("M&2 box graph", partial(self.addBox, 1))
        viewMenu.addAction("&Rotator box graph", partial(self.addBox, 2))
        viewMenu.addAction("M1M3 &PSD graph", partial(self.addPSD, 0))
        viewMenu.addSeparator()
        viewMenu.addAction("Remove all", self.removeAll)

        showMenu = menuBar.addMenu("&Show")
        showMenu.addSeparator()
        showMenu.addAction(logDock.toggleViewAction())

        self.toolBar = ToolBar()
        self.addToolBar(self.toolBar)

        acWidget = AccelerometersPageWidget(
            self.comms[0], self.SYSTEMS[0], self.toolBar
        )
        statusBar = StatusBar(f"M1M3:0")
        acWidget.cacheUpdated.connect(statusBar.cacheUpdated)
        self.setStatusBar(statusBar)

        self.addDockWidget(Qt.TopDockWidgetArea, acWidget)

        self.addDockWidget(Qt.BottomDockWidgetArea, logDock)

        self.setMinimumSize(700, 400)

        settings = QSettings("LSST.TS", "VMSGUI")
        try:
            self.restoreGeometry(settings.value("geometry"))
            self.restoreState(settings.value("windowState"))
        except AttributeError:
            self.resize(1000, 700)

    def addBox(self, index):
        id = self.getNextId(self.SYSTEMS[index] + ":")
        self.addDockWidget(
            Qt.TopDockWidgetArea,
            BoxChartWidget(f"{self.SYSTEMS[index]}:{id}", self.comms[index], []),
        )

    def addPSD(self):
        pass

    def removeAll(self):
        for child in self.children():
            if child.objectName()[:3] == "PSD" or child.objectName()[:3] == "BOX":
                self.removeDockWidget(child)
                del child

    def getNextId(self, prefix):
        id = 1
        for child in self.children():
            if child.objectName().startswith(prefix):
                id = int(child.objectName()[len(prefix) :]) + 1
        return id

    @asyncClose
    async def closeEvent(self, event):
        settings = QSettings("LSST.TS", "VMSGUI")
        settings.setValue("geometry", self.saveGeometry())
        settings.setValue("windowState", self.saveState())
        self.toolBar.storeSettings()
        for comm in self.comms:
            await comm.close()
        super().closeEvent(event)


if __name__ == "__main__":
    # Create the Qt Application
    app = QApplication(sys.argv)

    parser = QCommandLineParser()
    parser.addHelpOption()
    parser.addVersionOption()
    parser.process(app)

    args = parser.positionalArguments()
    app.setApplicationName(f"VMSGUI")

    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    # Create EUI
    eui = EUI()
    eui.show()

    def handler(signum, frame):
        print(f"Catching signal {signum}, exiting")
        loop.call_soon(eui.close)

    for signum in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]:
        signal.signal(signum, handler)

    # Run the main Qt loop
    with loop:
        loop.run_forever()

    # Close application
    sys.exit()
