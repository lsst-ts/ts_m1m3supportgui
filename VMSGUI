#!/usr/bin/env python3.8

import signal
import sys

from AccelerometersPageWidget import AccelerometersPageWidget

import SALComm

from PySide2.QtCore import Slot, Signal
from PySide2.QtWidgets import (
    QApplication,
    QMainWindow,
    QLabel,
    QToolBar,
    QStyle,
    QDoubleSpinBox,
)

from asyncqt import QEventLoop, asyncClose
import asyncio
from datetime import datetime


class ToolBar(QToolBar):

    frequencyChanged = Signal(float, float)

    def __init__(self):
        super().__init__()

        self.addAction(self.style().standardIcon(QStyle.SP_MediaStop), "Stop")

        self.addWidget(QLabel("Frequency"))

        self.minFreq = QDoubleSpinBox()
        self.minFreq.setDecimals(1)
        self.minFreq.setRange(0, 10000)
        self.minFreq.setSingleStep(5)
        self.minFreq.setValue(0)
        self.minFreq.valueChanged.connect(self.minChanged)
        self.addWidget(self.minFreq)

        self.addWidget(QLabel("-"))

        self.maxFreq = QDoubleSpinBox()
        self.maxFreq.setDecimals(1)
        self.maxFreq.setRange(0.1, 10000)
        self.maxFreq.setSingleStep(5)
        self.maxFreq.setValue(200)
        self.maxFreq.valueChanged.connect(self.maxChnaged)
        self.addWidget(self.maxFreq)

    @Slot(float)
    def minChanged(self, d):
        self.frequencyChanged.emit(d, self.maxFreq.value())

    @Slot(float)
    def maxChnaged(self, d):
        self.frequencyChanged.emit(self.minFreq.value(), d)


class CacheStatusWidget(QLabel):
    def __init__(self):
        super().__init__("Size: 0 --- - ---")

    @Slot(int, float, float)
    def cacheUpdated(self, length, start, end):
        self.setText(
            f"Size: {length} {datetime.fromtimestamp(start).strftime('%H:%M:%S.%f')} - {datetime.fromtimestamp(end).strftime('%H:%M:%S.%f')} {end-start:.03f}s"
        )


class EUI(QMainWindow):
    def __init__(self):
        super().__init__()

        self.comm = SALComm.create({"MTVMS": None})

        acWidget = AccelerometersPageWidget(self.comm)
        cacheStatus = CacheStatusWidget()
        acWidget.cacheUpdated.connect(cacheStatus.cacheUpdated)

        self.setCentralWidget(acWidget)

        toolBar = ToolBar()
        self.addToolBar(toolBar)

        self.statusBar().addWidget(cacheStatus)

        self.setMinimumSize(700, 400)

    @asyncClose
    async def closeEvent(self, event):
        await self.comm.close()
        event.accept()


if __name__ == "__main__":
    # Create the Qt Application
    app = QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    # Create EUI
    eui = EUI()
    eui.show()

    def handler(signum, frame):
        print(f"Catching signal {signum}, exiting")
        loop.call_soon(eui.close)

    for signum in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]:
        signal.signal(signum, handler)

    # Run the main Qt loop
    with loop:
        loop.run_forever()

    # Close application
    sys.exit()
