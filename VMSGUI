#!/usr/bin/env python3.8

import signal
import sys

from AccelerometersPageWidget import AccelerometersPageWidget
from VMSGUI import *

import SALComm

from PySide2.QtCore import Slot, Signal, QSettings
from PySide2.QtWidgets import QApplication, QMainWindow

from asyncqt import QEventLoop, asyncClose
import asyncio


class EUI(QMainWindow):
    def __init__(self):
        super().__init__()

        self.m1m3 = SALComm.create("MTVMS", index=1, queue_len=400)
        #self.m1m3 = SALComm.create("MTVMS", queue_len=400)

        self.toolBar = ToolBar()
        self.addToolBar(self.toolBar)

        acWidget = AccelerometersPageWidget(self.m1m3, "m1m3", self.toolBar)
        statusBar = StatusBar()
        acWidget.cacheUpdated.connect(statusBar.cacheUpdated)
        self.setStatusBar(statusBar)

        self.setCentralWidget(acWidget)

        self.setMinimumSize(700, 400)

        settings = QSettings("LSST.TS", "VMSGUI")
        try:
            self.restoreGeometry(settings.value("geometry"))
            self.restoreState(settings.value("windowState"))
        except AttributeError:
            self.resize(1000, 700)

    @asyncClose
    async def closeEvent(self, event):
        settings = QSettings("LSST.TS", "VMSGUI")
        settings.setValue("geometry", self.saveGeometry())
        settings.setValue("windowState", self.saveState())
        self.toolBar.storeSettings()
        await self.m1m3.close()
        super().closeEvent(event)


if __name__ == "__main__":
    # Create the Qt Application
    app = QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    # Create EUI
    eui = EUI()
    eui.show()

    def handler(signum, frame):
        print(f"Catching signal {signum}, exiting")
        loop.call_soon(eui.close)

    for signum in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]:
        signal.signal(signum, handler)

    # Run the main Qt loop
    with loop:
        loop.run_forever()

    # Close application
    sys.exit()
