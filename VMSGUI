#!/usr/bin/env python3.8

import signal
import sys

from VMSChartWidgets import *
import SALLog
from VMSGUI import *
from VMSCache import *

import SALComm

from PySide2.QtCore import Slot, Signal, QSettings, QCommandLineParser, Qt
from PySide2.QtWidgets import QApplication, QMainWindow, QDockWidget

import astropy.units as u
from asyncqt import QEventLoop, asyncClose
import asyncio
from functools import partial
import numpy as np


class EUI(QMainWindow):
    SAMPLE_TIME = 1 * u.ms.to(u.s)
    """Sample time (seconds)"""

    SYSTEMS = ["M1M3", "M2", "Rotator"]

    cacheUpdated = Signal(int, int, float, float)

    def __init__(self):
        super().__init__()

        self.comms = [
            SALComm.create("MTVMS", index=index, manual={"data": {"queue_len": 400}})
            for index in range(1, 4)
        ]

        for comm in self.comms:
            comm.data.connect(self.data)

        self.caches = [VMSCache(0, 3), VMSCache(0, 6), VMSCache(0, 3)]

        logDock = SALLog.Dock(self.comms)

        menuBar = self.menuBar()

        viewMenu = menuBar.addMenu("&Views")
        viewMenu.addAction(logDock.toggleViewAction())
        viewMenu.addSeparator()
        viewMenu.addAction("Remove all", self.removeAll)

        i = 0
        for s in self.SYSTEMS:
            m = menuBar.addMenu(s)
            m.addAction("New &box graph", partial(self.addBox, i))
            m.addAction("New &PSD graph", partial(self.addPSD, i))
            i += 1

        self.toolBar = ToolBar()
        self.addToolBar(self.toolBar)

        self.statusBar = StatusBar(self.SYSTEMS, self.SAMPLE_TIME)
        self.cacheUpdated.connect(self.statusBar.cacheUpdated)
        self.setStatusBar(self.statusBar)

        self.addDockWidget(Qt.BottomDockWidgetArea, logDock)

        self.setMinimumSize(700, 400)

        settings = QSettings("LSST.TS", "VMSGUI")
        try:
            self.restoreGeometry(settings.value("geometry"))
            self.restoreState(settings.value("windowState"))
        except AttributeError:
            self.resize(1000, 700)

        self.toolBar.intervalChanged.connect(self.intervalChanged)

        self.toolBar.frequencyChanged.emit(*self.toolBar.getFrequencyRange())
        self.toolBar.intervalChanged.emit(self.toolBar.interval.value())

        self.toolBar.intervalChanged.connect(self.intervalChanged)

        self.toolBar.frequencyChanged.emit(*self.toolBar.getFrequencyRange())
        self.toolBar.intervalChanged.emit(self.toolBar.interval.value())

    def addBox(self, index):
        prefix = "Box " + self.SYSTEMS[index] + ":"
        id = self.getNextId(prefix)
        self.addDockWidget(
            Qt.TopDockWidgetArea,
            BoxChartWidget(prefix + str(id), self.comms[index], []),
        )

    def addPSD(self, index):
        prefix = "PSD " + self.SYSTEMS[index] + ":"
        id = self.getNextId(prefix)
        psdWidget = PSDWidget(
            prefix + str(id),
            self.caches[index],
            self.SAMPLE_TIME,
            self.toolBar,
        )
        self.cacheUpdated.connect(psdWidget.cacheUpdated)
        self.toolBar.frequencyChanged.connect(psdWidget.frequencyChanged)
        psdWidget.frequencyChanged(*self.toolBar.getFrequencyRange())
        self.addDockWidget(Qt.TopDockWidgetArea, psdWidget)

    def removeAll(self):
        for child in self.children():
            if child.objectName()[:3] == "PSD" or child.objectName()[:3] == "Box":
                self.removeDockWidget(child)
                del child

    def getNextId(self, prefix):
        id = 1
        for child in self.children():
            if child.objectName().startswith(prefix):
                id = int(child.objectName()[len(prefix) :]) + 1
        return id

    @Slot(map)
    def data(self, data):
        cache = self.caches[data.MTVMSID - 1]
        added, chunk_removed = cache.newChunk(data, self.SAMPLE_TIME)
        if added:
            self.cacheUpdated.emit(
                data.MTVMSID - 1,
                len(cache),
                cache.startTime(),
                cache.endTime(),
            )

    @Slot(float)
    def intervalChanged(self, interval):
        newSize = int(np.ceil(interval / self.SAMPLE_TIME))
        for cache in self.caches:
            cache.resize(newSize)

    @asyncClose
    async def closeEvent(self, event):
        settings = QSettings("LSST.TS", "VMSGUI")
        settings.setValue("geometry", self.saveGeometry())
        settings.setValue("windowState", self.saveState())
        self.toolBar.storeSettings()
        for comm in self.comms:
            await comm.close()
        super().closeEvent(event)


if __name__ == "__main__":
    # Create the Qt Application
    app = QApplication(sys.argv)

    parser = QCommandLineParser()
    parser.addHelpOption()
    parser.addVersionOption()
    parser.process(app)

    args = parser.positionalArguments()
    app.setApplicationName(f"VMSGUI")

    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    # Create EUI
    eui = EUI()
    eui.show()

    def handler(signum, frame):
        print(f"Catching signal {signum}, exiting")
        loop.call_soon(eui.close)

    for signum in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]:
        signal.signal(signum, handler)

    # Run the main Qt loop
    with loop:
        loop.run_forever()

    # Close application
    sys.exit()
