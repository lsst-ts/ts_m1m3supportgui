#!/usr/bin/env python3.8

import signal
import sys

from AccelerometersPageWidget import AccelerometersPageWidget
from VMSGUI import *

import SALComm

from PySide2.QtCore import Slot, Signal
from PySide2.QtWidgets import QApplication, QMainWindow

from asyncqt import QEventLoop, asyncClose
import asyncio


class EUI(QMainWindow):
    def __init__(self):
        super().__init__()

        self.comm = SALComm.create({"MTVMS": None})

        toolBar = ToolBar()
        self.addToolBar(toolBar)

        acWidget = AccelerometersPageWidget(self.comm, toolBar)
        cacheStatus = CacheStatusWidget()
        acWidget.cacheUpdated.connect(cacheStatus.cacheUpdated)

        self.setCentralWidget(acWidget)

        self.statusBar().addWidget(cacheStatus)

        self.setMinimumSize(700, 400)

    @asyncClose
    async def closeEvent(self, event):
        await self.comm.close()
        event.accept()


if __name__ == "__main__":
    # Create the Qt Application
    app = QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    # Create EUI
    eui = EUI()
    eui.show()

    def handler(signum, frame):
        print(f"Catching signal {signum}, exiting")
        loop.call_soon(eui.close)

    for signum in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]:
        signal.signal(signum, handler)

    # Run the main Qt loop
    with loop:
        loop.run_forever()

    # Close application
    sys.exit()
